// Code generated by protoc-gen-go. DO NOT EDIT.
// source: chatbothub.proto

package chatbothub

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// The request message containing the user's name.
type EventRequest struct {
	EventType            string   `protobuf:"bytes,1,opt,name=eventType,proto3" json:"eventType,omitempty"`
	Body                 string   `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
	Txid                 string   `protobuf:"bytes,3,opt,name=txid,proto3" json:"txid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EventRequest) Reset()         { *m = EventRequest{} }
func (m *EventRequest) String() string { return proto.CompactTextString(m) }
func (*EventRequest) ProtoMessage()    {}
func (*EventRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b1f640cec0d9d68, []int{0}
}

func (m *EventRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EventRequest.Unmarshal(m, b)
}
func (m *EventRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EventRequest.Marshal(b, m, deterministic)
}
func (m *EventRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventRequest.Merge(m, src)
}
func (m *EventRequest) XXX_Size() int {
	return xxx_messageInfo_EventRequest.Size(m)
}
func (m *EventRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EventRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EventRequest proto.InternalMessageInfo

func (m *EventRequest) GetEventType() string {
	if m != nil {
		return m.EventType
	}
	return ""
}

func (m *EventRequest) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

func (m *EventRequest) GetTxid() string {
	if m != nil {
		return m.Txid
	}
	return ""
}

// The response message containing the greetings
type EventReply struct {
	EventType            string   `protobuf:"bytes,1,opt,name=eventType,proto3" json:"eventType,omitempty"`
	Body                 string   `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
	Txid                 string   `protobuf:"bytes,3,opt,name=txid,proto3" json:"txid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EventReply) Reset()         { *m = EventReply{} }
func (m *EventReply) String() string { return proto.CompactTextString(m) }
func (*EventReply) ProtoMessage()    {}
func (*EventReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b1f640cec0d9d68, []int{1}
}

func (m *EventReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EventReply.Unmarshal(m, b)
}
func (m *EventReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EventReply.Marshal(b, m, deterministic)
}
func (m *EventReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventReply.Merge(m, src)
}
func (m *EventReply) XXX_Size() int {
	return xxx_messageInfo_EventReply.Size(m)
}
func (m *EventReply) XXX_DiscardUnknown() {
	xxx_messageInfo_EventReply.DiscardUnknown(m)
}

var xxx_messageInfo_EventReply proto.InternalMessageInfo

func (m *EventReply) GetEventType() string {
	if m != nil {
		return m.EventType
	}
	return ""
}

func (m *EventReply) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

func (m *EventReply) GetTxid() string {
	if m != nil {
		return m.Txid
	}
	return ""
}

func init() {
	proto.RegisterType((*EventRequest)(nil), "chatbothub.EventRequest")
	proto.RegisterType((*EventReply)(nil), "chatbothub.EventReply")
}

func init() { proto.RegisterFile("chatbothub.proto", fileDescriptor_0b1f640cec0d9d68) }

var fileDescriptor_0b1f640cec0d9d68 = []byte{
	// 202 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x48, 0xce, 0x48, 0x2c,
	0x49, 0xca, 0x2f, 0xc9, 0x28, 0x4d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x42, 0x88,
	0x28, 0x85, 0x70, 0xf1, 0xb8, 0x96, 0xa5, 0xe6, 0x95, 0x04, 0xa5, 0x16, 0x96, 0xa6, 0x16, 0x97,
	0x08, 0xc9, 0x70, 0x71, 0xa6, 0x82, 0xf8, 0x21, 0x95, 0x05, 0xa9, 0x12, 0x8c, 0x0a, 0x8c, 0x1a,
	0x9c, 0x41, 0x08, 0x01, 0x21, 0x21, 0x2e, 0x96, 0xa4, 0xfc, 0x94, 0x4a, 0x09, 0x26, 0xb0, 0x04,
	0x98, 0x0d, 0x12, 0x2b, 0xa9, 0xc8, 0x4c, 0x91, 0x60, 0x86, 0x88, 0x81, 0xd8, 0x4a, 0x41, 0x5c,
	0x5c, 0x50, 0x53, 0x0b, 0x72, 0x2a, 0xa9, 0x63, 0xa6, 0x51, 0x30, 0x17, 0x97, 0x73, 0x46, 0x62,
	0x89, 0x53, 0x7e, 0x89, 0x47, 0x69, 0x92, 0x90, 0x2b, 0x17, 0x37, 0xd8, 0x86, 0x90, 0xd2, 0xbc,
	0xbc, 0xd4, 0x1c, 0x21, 0x09, 0x3d, 0x24, 0x5f, 0x22, 0x7b, 0x48, 0x4a, 0x0c, 0x8b, 0x4c, 0x41,
	0x4e, 0xa5, 0x12, 0x83, 0x06, 0xa3, 0x01, 0xa3, 0x93, 0x01, 0x97, 0x74, 0x5e, 0x6a, 0x89, 0x5e,
	0x46, 0x62, 0x79, 0x76, 0x79, 0x66, 0x49, 0x46, 0x79, 0x66, 0x5e, 0x0a, 0x92, 0x7a, 0x27, 0x7e,
	0x84, 0x8d, 0x01, 0xa0, 0xa0, 0x0b, 0x60, 0x4c, 0x62, 0x03, 0x87, 0xa1, 0x31, 0x20, 0x00, 0x00,
	0xff, 0xff, 0x07, 0x09, 0x7e, 0xfb, 0x57, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ChatBotHubClient is the client API for ChatBotHub service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ChatBotHubClient interface {
	// Sends a greeting
	EventTunnel(ctx context.Context, opts ...grpc.CallOption) (ChatBotHub_EventTunnelClient, error)
}

type chatBotHubClient struct {
	cc *grpc.ClientConn
}

func NewChatBotHubClient(cc *grpc.ClientConn) ChatBotHubClient {
	return &chatBotHubClient{cc}
}

func (c *chatBotHubClient) EventTunnel(ctx context.Context, opts ...grpc.CallOption) (ChatBotHub_EventTunnelClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ChatBotHub_serviceDesc.Streams[0], "/chatbothub.ChatBotHub/EventTunnel", opts...)
	if err != nil {
		return nil, err
	}
	x := &chatBotHubEventTunnelClient{stream}
	return x, nil
}

type ChatBotHub_EventTunnelClient interface {
	Send(*EventRequest) error
	Recv() (*EventReply, error)
	grpc.ClientStream
}

type chatBotHubEventTunnelClient struct {
	grpc.ClientStream
}

func (x *chatBotHubEventTunnelClient) Send(m *EventRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *chatBotHubEventTunnelClient) Recv() (*EventReply, error) {
	m := new(EventReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ChatBotHubServer is the server API for ChatBotHub service.
type ChatBotHubServer interface {
	// Sends a greeting
	EventTunnel(ChatBotHub_EventTunnelServer) error
}

func RegisterChatBotHubServer(s *grpc.Server, srv ChatBotHubServer) {
	s.RegisterService(&_ChatBotHub_serviceDesc, srv)
}

func _ChatBotHub_EventTunnel_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ChatBotHubServer).EventTunnel(&chatBotHubEventTunnelServer{stream})
}

type ChatBotHub_EventTunnelServer interface {
	Send(*EventReply) error
	Recv() (*EventRequest, error)
	grpc.ServerStream
}

type chatBotHubEventTunnelServer struct {
	grpc.ServerStream
}

func (x *chatBotHubEventTunnelServer) Send(m *EventReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *chatBotHubEventTunnelServer) Recv() (*EventRequest, error) {
	m := new(EventRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _ChatBotHub_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chatbothub.ChatBotHub",
	HandlerType: (*ChatBotHubServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "EventTunnel",
			Handler:       _ChatBotHub_EventTunnel_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "chatbothub.proto",
}
